import telebot
from telebot import types
import sqlite3
import atexit
import pytz
import datetime
import re
import schedule
import time
from telebot.types import BotCommand, Message
from telegram.error import TelegramError
import threading
import transliterate

timezone = pytz.timezone('Europe/Kiev')

conn = sqlite3.connect('users.db', check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    name TEXT,
    birthday TEXT,
    username TEXT
)
''')
conn.commit()

cursor.execute('''
CREATE TABLE IF NOT EXISTS schedule (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    day_of_week TEXT,
    lesson_number INTEGER,
    subject TEXT,
    start_time TEXT,
    end_time TEXT,
    command TEXT,
    reminded INTEGER DEFAULT 0
)
''')
conn.commit()

cursor.execute('''
CREATE TABLE IF NOT EXISTS homework (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    subject TEXT,
    homework TEXT,
    photo_ids TEXT
)
''')
conn.commit()

cursor.execute('''
CREATE TABLE IF NOT EXISTS important_events (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    start_date TEXT,
    end_date TEXT,
    event_text TEXT
)
''')
conn.commit()


bot = telebot.TeleBot('7430719579:AAEbBWVSgmrjdm0JXY9FruhTVXqxlELYjhM')  #7539784956:AAHSTLqowwWwkLX_wA2rJ_tdosUDzo02Np0 –û—Å–Ω–æ–≤–∞:7430719579:AAEbBWVSgmrjdm0JXY9FruhTVXqxlELYjhM

commands = [
    BotCommand("start", "–ù–∞—á–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ"),
    BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"),
    BotCommand("get_info", "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ"),
    BotCommand("register", "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
    BotCommand("homework", "–ó–∞–ø–∏—Å–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"),
    BotCommand("clear_chat", "–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞")
]

admin_commands = [
    BotCommand("monday", "–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"),
    BotCommand("tuesday", "–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Ç–æ—Ä–Ω–∏–∫"),
    BotCommand("wednesday", "–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å—Ä–µ–¥—É"),
    BotCommand("thursday", "–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —á–µ—Ç–≤–µ—Ä–≥"),
    BotCommand("friday", "–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø—è—Ç–Ω–∏—Ü—É"),
    BotCommand("add_event", "–°–æ–∑–¥–∞—Ç—å –≤–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"),
    BotCommand("delete_event", "–£–¥–∞–ª–∏—Ç—å –≤–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"),
    BotCommand("list_events", "–°–ø–∏—Å–æ–∫ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"),
    BotCommand("clear_db", "–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"),
    BotCommand("list_users", "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
    BotCommand("edit_lesson", "–ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–∫ –ø–æ –¥–Ω—é –∏ –Ω–æ–º–µ—Ä—É —É—Ä–æ–∫–∞"),
    BotCommand("delete_last_lesson", "–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫ –Ω–∞ –¥–µ–Ω—å"),
    BotCommand("add_lesson", "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–∫ –≤ –∫–æ–Ω–µ—Ü –¥–Ω—è")
]


admin_ids = [1341134928, 616194710, 5626868283] 

def get_help_message(user_id):
    help_message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for command in commands:
        help_message += f"/{command.command} - {command.description}\n"
    
    if user_id in admin_ids:
        help_message += "\nüîí –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n"
        for command in admin_commands:
            help_message += f"/{command.command} - {command.description}\n"
    
    return help_message

schedule_sent_today = False
user_data = {}

def is_admin(user_id):
    return user_id in admin_ids

@bot.message_handler(commands=['list_users'])
def list_users(message):
    if message.from_user.id in admin_ids:
        cursor.execute("SELECT user_id, name, birthday, username FROM users")
        users = cursor.fetchall()

        if users:
            response = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
            for user in users:
                user_id, name, birthday, username = user
                response += f"ID: {user_id}\n"
                response += f"–ò–º—è: {name}\n"
                response += f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthday}\n"
                response += f"Username: @{username if username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                response += "-" * 20 + "\n"
        else:
            response = "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

        bot.send_message(message.chat.id, response)
    else:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@bot.message_handler(commands=['clear_db'])
def clear_database(message):
    if message.from_user.id in admin_ids:
        try:
            cursor.execute('DELETE FROM users')
            cursor.execute('DELETE FROM schedule')
            cursor.execute('DELETE FROM homework')
            cursor.execute('DELETE FROM important_events')
            conn.commit()

            bot.send_message(message.chat.id, "–í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.")
        except Exception as e:
            bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    else:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


def show_schedule_buttons(chatid, text):
    markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    itembtn1 = types.KeyboardButton('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')
    itembtn2 = types.KeyboardButton('–í—Ç–æ—Ä–Ω–∏–∫')
    itembtn3 = types.KeyboardButton('–°—Ä–µ–¥–∞')
    itembtn4 = types.KeyboardButton('–ß–µ—Ç–≤–µ—Ä–≥')
    itembtn5 = types.KeyboardButton('–ü—è—Ç–Ω–∏—Ü–∞')
    markup.add(itembtn1, itembtn2, itembtn3, itembtn4, itembtn5)
    
    bot.send_message(chatid, text, reply_markup=markup)

def add_schedule_day(day, message):
    if message.from_user.id not in admin_ids:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    cursor.execute('DELETE FROM schedule WHERE day_of_week = ?', (day,))
    conn.commit()

    bot.send_message(message.chat.id, f"–¢—ã –∑–∞–ø–æ–ª–Ω—è–µ—à—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}. –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '—Å—Ç–æ–ø' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
    bot.register_next_step_handler(message, lambda msg: ask_lesson_info(day, 1, msg))

def ask_lesson_info(day, lesson_number, message):
    if message.text.lower() == '—Å—Ç–æ–ø':
        bot.send_message(message.chat.id, f"–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ {day} –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        return
    
    subject = message.text
    
    cursor.execute('SELECT subject FROM homework WHERE subject=?', (subject,))
    existing_subject = cursor.fetchone()

    if not existing_subject:
        cursor.execute('INSERT INTO homework (subject, homework) VALUES (?, ?)', (subject, '–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –µ—â–µ –Ω–µ –∑–∞–¥–∞–Ω–æ'))
        conn.commit()
    
    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–∞ {lesson_number} !!!(–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú)!!!:")
    bot.register_next_step_handler(message, lambda msg: ask_start_time(day, lesson_number, subject, msg))

def ask_start_time(day, lesson_number, subject, message):
    start_time = message.text
    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Ä–æ–∫–∞ {lesson_number} !!!(–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú)!!!:")
    bot.register_next_step_handler(message, lambda msg: ask_end_time(day, lesson_number, subject, start_time, msg))

def ask_end_time(day, lesson_number, subject, start_time, message):
    end_time = message.text

    command = generate_command(subject)
    cursor.execute('''
        INSERT INTO schedule (day_of_week, lesson_number, subject, start_time, end_time, command)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (day, lesson_number, subject, start_time, end_time, command))
    conn.commit()

    bot.send_message(message.chat.id, f"–£—Ä–æ–∫ {lesson_number} ({subject}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}.")
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '—Å—Ç–æ–ø' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
    bot.register_next_step_handler(message, lambda msg: ask_lesson_info(day, lesson_number + 1, msg))

@bot.message_handler(commands=['monday'])
def handle_monday(message):
    add_schedule_day('Monday', message)

@bot.message_handler(commands=['tuesday'])
def handle_tuesday(message):
    add_schedule_day('Tuesday', message)

@bot.message_handler(commands=['wednesday'])
def handle_wednesday(message):
    add_schedule_day('Wednesday', message)

@bot.message_handler(commands=['thursday'])
def handle_thursday(message):
    add_schedule_day('Thursday', message)

@bot.message_handler(commands=['friday'])
def handle_friday(message):
    add_schedule_day('Friday', message)

def ask_name(message):
    user_name = message.text
    user_id = message.from_user.id

    if re.match(r'^[^a-zA-Z–∞-—è–ê-–Ø]', user_name):  
        bot.send_message(user_id, "–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ —Ü–∏—Ñ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:")
        bot.register_next_step_handler(message, ask_name)
        return

    cursor.execute('INSERT INTO users (user_id, name) VALUES (?, ?) ON CONFLICT(user_id) DO UPDATE SET name=?', (user_id, user_name, user_name))
    conn.commit()
    
    bot.send_message(user_id, f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {user_name} üòâ")
    bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏, –∫–æ–≥–¥–∞ —É —Ç–µ–±—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è? (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì)")
    bot.register_next_step_handler_by_chat_id(user_id, ask_birthday)

def ask_birthday(message):
    user_birthday = message.text
    user_id = message.from_user.id
    
    date_pattern = r"^\d{2}\.\d{2}\.\d{4}$"

    if re.match(date_pattern, user_birthday):
        try:
            day, month, year = map(int, user_birthday.split('.'))
            date_valid = datetime.datetime(year, month, day)

            cursor.execute('UPDATE users SET birthday=? WHERE user_id=?', (user_birthday, user_id))
            conn.commit()

            show_schedule_buttons(user_id, "–û—Ç–ª–∏—á–Ω–æ, –∑–∞–ø–æ–º–Ω–∏–ª!")
            bot.send_message(user_id, "–ù–∞ —ç—Ç–æ–º –≤—Å–µ, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /register")
            bot.send_message(user_id, "–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /help")

        
        except ValueError:
            bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
            bot.register_next_step_handler(message, ask_birthday)
    
    else:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        bot.register_next_step_handler(message, ask_birthday)

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    username = message.from_user.username
    
    cursor.execute('SELECT name, birthday FROM users WHERE user_id=?', (user_id,))
    user = cursor.fetchone()

    if is_admin(user_id):
        full_commands = commands + admin_commands
    else:
        full_commands = commands

    bot.set_my_commands(full_commands, scope=types.BotCommandScopeChat(message.chat.id))
    if user:
        name, birthday = user
        
        if not name:
            show_schedule_buttons(user_id, "–î–ª—è –Ω–∞—á–∞–ª–∞, –∫–∞–∫ –º–Ω–µ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?")
            bot.register_next_step_handler(message, ask_name)
        elif not birthday:
            bot.send_message(user_id, f"–ü—Ä–∏–≤–µ—Ç, {name}! –Ø –µ—â–µ –Ω–µ –∑–Ω–∞—é, –∫–æ–≥–¥–∞ —É —Ç–µ–±—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è.")
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
            bot.register_next_step_handler_by_chat_id(user_id, ask_birthday)
        else:
            bot.send_message(user_id, f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name}! –†–∞–¥ —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! üòä")
            show_schedule_buttons(user_id, "–ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?")
    else:
        bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –Ø Beneki!üëã")
        bot.send_message(user_id, "–ß—Ç–æ-—Ç–æ —è —Ç–µ–±—è –Ω–µ –ø—Ä–∏–ø–æ–º–∏–Ω–∞—é ü§î")
        bot.send_message(user_id, "–ù–µ –±–µ–¥–∞, —Å–µ–π—á–∞—Å –∏—Å–ø—Ä–∞–≤–∏–º")
        bot.send_message(user_id, "–î–ª—è –Ω–∞—á–∞–ª–∞, –∫–∞–∫ –º–Ω–µ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?")
        bot.register_next_step_handler(message, ask_name)

    cursor.execute('INSERT INTO users (user_id, username) VALUES (?, ?) ON CONFLICT(user_id) DO UPDATE SET username=?', (user_id, username, username))
    conn.commit()

@bot.message_handler(commands=['get_info'])
def get_user_info(message):
    user_id = message.from_user.id
    
    cursor.execute('SELECT name, birthday, username FROM users WHERE user_id=?', (user_id,))
    user = cursor.fetchone()
    
    if user:
        name, birthday, username = user
        response = f"–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ:\n–ò–º—è: {name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {birthday or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n–ù–∏–∫–Ω–µ–π–º: @{username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
    else:
        response = "–Ø –Ω–µ –Ω–∞—à–µ–ª —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start."

    bot.send_message(user_id, response)

@bot.message_handler(commands=['register'])
def reregister(message):
    bot.send_message(message.chat.id, "–î–∞–≤–∞–π –æ–±–Ω–æ–≤–∏–º —Ç–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
    bot.send_message(message.chat.id, "–ö–∞–∫ –º–Ω–µ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?")
    bot.register_next_step_handler(message, ask_name)


def add_important_event(start_date, end_date, event_text):
    cursor.execute('''
    INSERT INTO important_events (start_date, end_date, event_text)
    VALUES (?, ?, ?)
    ''', (start_date, end_date, event_text))
    conn.commit()

def delete_important_event(event_id):
    cursor.execute('''
    DELETE FROM important_events WHERE id=?
    ''', (event_id,))
    conn.commit()

def get_important_events():
    now = datetime.datetime.now(timezone).strftime('%Y-%m-%d')
    cursor.execute('SELECT * FROM important_events WHERE end_date >= ?', (now,))
    events = cursor.fetchall()
    return events

def remove_expired_events():
    now = datetime.datetime.now(timezone).strftime('%Y-%m-%d')
    cursor.execute('DELETE FROM important_events WHERE end_date < ?', (now,))
    conn.commit()

def send_important_events(user_id):
    events = get_important_events()
    if not events:
        return
    
    response = "üì¢ <b>–í–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:</b>\n\n"
    for event in events:
        response += f"üîπ {event[3]}\n"
    
    bot.send_message(user_id, response, parse_mode="HTML")

@bot.message_handler(commands=['help'])
def send_help(message: Message):
    user_id = message.from_user.id
    help_message = get_help_message(user_id)
    bot.send_message(message.chat.id, help_message)

schedule.every().day.at("00:05").do(remove_expired_events)

@bot.message_handler(func=lambda message: message.text in ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞'])
def show_day_schedule(message):
    user_id = message.from_user.id
    days_translation = {
        '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 'Monday',
        '–í—Ç–æ—Ä–Ω–∏–∫': 'Tuesday',
        '–°—Ä–µ–¥–∞': 'Wednesday',
        '–ß–µ—Ç–≤–µ—Ä–≥': 'Thursday',
        '–ü—è—Ç–Ω–∏—Ü–∞': 'Friday'
    }
    
    day = days_translation[message.text]
    
    cursor.execute('SELECT lesson_number, subject, start_time, end_time, command FROM schedule WHERE day_of_week=? ORDER BY lesson_number', (day,))
    lessons = cursor.fetchall()
    
    if lessons:
        response = f"üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {message.text}:</b>\n\n"
        for lesson_number, subject, start_time, end_time, command in lessons:
            response += f"üîπ <b>{lesson_number}</b>. <b>{subject}</b> {start_time} - {end_time}\n "
            response += f"   üî∏ <i>–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:</i> \n   {command}\n\n"
        bot.send_message(message.chat.id, response, parse_mode="HTML")
        send_important_events(user_id)
    else:
        bot.send_message(message.chat.id, f"üîπ –ù–∞ {message.text} –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        send_important_events(user_id)


def check_schedule():
    now = datetime.datetime.now(timezone)  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–æ–π
    current_time = now.strftime("%H:%M")
    current_day = now.strftime("%A")

    local_cursor = conn.cursor()

    local_cursor.execute('SELECT id, lesson_number, start_time, end_time, subject, reminded FROM schedule WHERE day_of_week=?', (current_day,))
    lessons = local_cursor.fetchall()

    for lesson_id, lesson_number, start_time, end_time, subject, reminded in lessons:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º start_time –∏ end_time –≤ datetime —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–æ–π
        lesson_time = datetime.datetime.strptime(start_time, "%H:%M").replace(tzinfo=timezone)
        end_time_dt = datetime.datetime.strptime(end_time, "%H:%M").replace(tzinfo=timezone)

        # –ó–∞–¥–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        lesson_time = now.replace(hour=lesson_time.hour, minute=lesson_time.minute, second=0, microsecond=0)
        end_time_dt = now.replace(hour=end_time_dt.hour, minute=end_time_dt.minute, second=0, microsecond=0)

        if 0 <= (lesson_time - now).total_seconds() <= 300 and reminded == 0:
            local_cursor.execute('SELECT user_id FROM users')
            users = local_cursor.fetchall()

            for user_id, in users:
                try:
                    bot.send_message(user_id, f"üü†–°–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è {subject}! –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ {start_time}.")
                except TelegramError:
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞
                    pass

            local_cursor.execute('UPDATE schedule SET reminded=1 WHERE id=?', (lesson_id,))
            conn.commit()

        if now >= lesson_time and now <= lesson_time + datetime.timedelta(minutes=1) and reminded == 1:
            local_cursor.execute('SELECT user_id FROM users')
            users = local_cursor.fetchall()

            for user_id, in users:
                try:
                    bot.send_message(user_id, f"üî¥–£—Ä–æ–∫ {subject} –Ω–∞—á–∞–ª—Å—è!")
                except TelegramError:
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞
                    pass

            local_cursor.execute('UPDATE schedule SET reminded=2 WHERE id=?', (lesson_id,))
            conn.commit()

        if now >= end_time_dt and reminded == 2:
            local_cursor.execute('SELECT lesson_number, start_time, subject FROM schedule WHERE day_of_week=? AND lesson_number=?', (current_day, lesson_number + 1))
            next_lesson = local_cursor.fetchone()

            if next_lesson:
                next_lesson_number, next_start_time, next_subject = next_lesson

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞ –∫ datetime —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–æ–π
                next_start_time_dt = datetime.datetime.strptime(next_start_time, "%H:%M").replace(tzinfo=timezone)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
                if next_start_time_dt < end_time_dt:
                    next_start_time_dt += datetime.timedelta(days=1)

                # –ü–æ–¥—Å—á–µ—Ç –ø–µ—Ä–µ–º–µ–Ω—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º total_seconds
                break_duration = int((next_start_time_dt - end_time_dt).total_seconds() // 60)

                message = f"üü¢–£—Ä–æ–∫ ‚Ññ{lesson_number} –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!. –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ ({next_subject}) –Ω–∞—á–Ω–µ—Ç—Å—è –≤ {next_start_time}."
            else:
                message = f"üü¢–£—Ä–æ–∫ ‚Ññ{lesson_number} –∑–∞–∫–æ–Ω—á–∏–ª—Å—è! –≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."

            local_cursor.execute('SELECT user_id FROM users')
            users = local_cursor.fetchall()

            for user_id, in users:
                try:
                    bot.send_message(user_id, message)
                except TelegramError:
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞
                    pass

            local_cursor.execute('UPDATE schedule SET reminded=0 WHERE id=?', (lesson_id,))
            conn.commit()

schedule.every().second.do(check_schedule)

admin_id = 1341134928

@bot.message_handler(commands=['homework'])
def handle_homework(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞:")
    bot.register_next_step_handler(message, get_homework)

def get_homework(message):
    subject = message.text

    cursor.execute('SELECT id, homework FROM homework WHERE subject=?', (subject,))
    lesson = cursor.fetchone()

    if lesson:
        lesson_id, existing_homework = lesson
        bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è {subject}:")
        bot.register_next_step_handler(message, lambda msg: collect_homework_data(lesson_id, subject, msg))
    else:
        bot.send_message(message.chat.id, "–£—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")

def collect_homework_data(lesson_id, subject, message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    homework = message.text  # –ë–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Ç–æ—á–Ω–æ —Ç–∞–∫, –∫–∞–∫ –µ–≥–æ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å, –Ω–∞–ø–∏—à–∏ '—Å—Ç–æ–ø' (–µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å—Ç–æ–ø)")
    bot.register_next_step_handler(message, lambda msg: collect_photos(lesson_id, subject, user_id, user_name, homework, [], msg))

def collect_photos(lesson_id, subject, user_id, user_name, homework, photo_ids, message):
    if message.text and message.text.lower() == '—Å—Ç–æ–ø':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
        send_homework_to_admin( subject, user_id, user_name, homework, photo_ids)
        bot.send_message(message.chat.id, "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
        return

    if message.photo:
        file_id = message.photo[-1].file_id
        photo_ids.append(file_id)
        bot.send_message(message.chat.id, "–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å –µ—â–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '—Å—Ç–æ–ø' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

    bot.register_next_step_handler(message, lambda msg: collect_photos(lesson_id, subject, user_id, user_name, homework, photo_ids, msg))


def send_homework_to_admin(subject, user_id, user_name, homework_text, photo_ids):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –µ—Å—Ç—å, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö –≤ —Å—Ç—Ä–æ–∫—É
    photo_ids_str = ','.join(photo_ids) if photo_ids else None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    cursor.execute('SELECT id FROM homework WHERE subject=?', (subject,))
    lesson = cursor.fetchone()

    if lesson:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–∞–∑—É, –∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è
        lesson_id = lesson[0]
    else:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
        cursor.execute('INSERT INTO homework (subject, homework, photo_ids) VALUES (?, ?, ?)', 
                       (subject, homework_text, photo_ids_str))
        lesson_id = cursor.lastrowid
        conn.commit()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É
    homework_message = f"–ù–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ\n–ü—Ä–µ–¥–º–µ—Ç: {subject}\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: @{user_name} (ID: {user_id})\n\n–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:\n{homework_text}"

    bot.send_message(admin_id, homework_message)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã
    if photo_ids:
        for file_id in photo_ids:
            bot.send_photo(admin_id, file_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    markup = types.InlineKeyboardMarkup()
    approve_button = types.InlineKeyboardButton("‚úÖ", callback_data=f"approve_{lesson_id}_{user_id}_{homework_text}_{photo_ids_str}")
    reject_button = types.InlineKeyboardButton("‚ùå", callback_data=f"reject_{lesson_id}_{user_id}")
    markup.add(approve_button, reject_button)

    bot.send_message(admin_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('approve') or call.data.startswith('reject'))
def handle_admin_decision(call):
    if call.data.startswith('approve'):
        # –ê–¥–º–∏–Ω –æ–¥–æ–±—Ä–∏–ª –∑–∞–¥–∞–Ω–∏–µ
        _, lesson_id, user_id, homework_text, photo_ids_str = call.data.split('_')
        approve_homework(lesson_id, int(user_id), homework_text, photo_ids_str, call.message)

    elif call.data.startswith('reject'):
        # –ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ
        _, lesson_id, user_id = call.data.split('_')
        bot.send_message(call.message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:")
        bot.register_next_step_handler(call.message, lambda msg: reject_homework(lesson_id, int(user_id), msg, call.message))

def approve_homework(lesson_id, user_id, homework_text, photo_ids_str, admin_message):
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å –Ω–æ–≤—ã–º –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute('UPDATE homework SET homework=?, photo_ids=? WHERE id=?', 
                   (homework_text, photo_ids_str, lesson_id))
    conn.commit()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏
    bot.send_message(admin_id, "‚úÖ–¢—ã –æ–¥–æ–±—Ä–∏–ª –¥–∑!")
    bot.send_message(user_id, "‚úÖ–¢–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ")

def reject_homework(lesson_id, user_id, message, admin_message):
    reason = message.text

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∏ –ø—Ä–∏—á–∏–Ω–µ
    bot.send_message(user_id, f"‚ùå–¢–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. \n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
    bot.send_message(admin_id, "‚ùå–¢—ã –æ—Ç–∫–ª–æ–Ω–∏–ª –¥–∑!")

@bot.message_handler(commands=['delete_homework'])
def handle_delete_homework(message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ user_id)
    if message.from_user.id == admin_id:
        bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ ID –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(message, delete_homework)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

def delete_homework(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        homework_id = int(message.text)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º ID
        cursor.execute('SELECT * FROM homework WHERE id=?', (homework_id,))
        homework_data = cursor.fetchone()

        if homework_data:
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID
            cursor.execute('DELETE FROM homework WHERE id=?', (homework_id,))
            conn.commit()

            bot.send_message(message.chat.id, f"–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å ID {homework_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
        else:
            bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        
def reset_reminders():
    now = datetime.datetime.now(timezone)
    current_day = now.strftime("%A")
    
    if current_day == "Monday":
        local_cursor = conn.cursor()
        local_cursor.execute('UPDATE schedule SET reminded=0')
        conn.commit()
schedule.every().monday.at("00:01").do(reset_reminders)

def check_end_of_day():
    global schedule_sent_today 

    now = datetime.datetime.now(timezone)
    current_day = now.strftime("%A")
    current_time = now.strftime("%H:%M")

    days_translation = {
        'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
        'Wednesday': '–°—Ä–µ–¥–∞',
        'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
        'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
        'Saturday': '–°—É–±–±–æ—Ç–∞',
        'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }
    
    if schedule_sent_today:
        return False  

    conn = sqlite3.connect('users.db')  
    cursor = conn.cursor()

    try:
        cursor.execute('SELECT end_time FROM schedule WHERE day_of_week=? ORDER BY lesson_number DESC LIMIT 1', (current_day,))
        last_lesson = cursor.fetchone()

        if last_lesson:
            last_end_time = last_lesson[0]
            if current_time >= last_end_time: 
                next_day_eng = (now + datetime.timedelta(days=1)).strftime("%A")
                next_day_rus = days_translation[next_day_eng]

                cursor.execute('SELECT lesson_number, subject, start_time, end_time, command FROM schedule WHERE day_of_week=? ORDER BY lesson_number', (next_day_eng,))
                lessons_tomorrow = cursor.fetchall()
                
                cursor.execute('SELECT user_id FROM users')
                users = cursor.fetchall()

                for user_id, in users:
                    try:
                        if lessons_tomorrow:
                            response = f"üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({next_day_rus}):</b>\n\n"
                            for lesson_number, subject, start_time, end_time, command in lessons_tomorrow:
                                response += f"üîπ <b>{lesson_number}</b>. <b>{subject}</b> {start_time} - {end_time}\n"
                                response += f"   üî∏ <i>–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:</i> \n   {command}\n\n"
                            
                            bot.send_message(user_id, response, parse_mode="HTML")
                            send_important_events(user_id)
                        else:
                            bot.send_message(user_id, "üîπ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –∑–∞–≤—Ç—Ä–∞ —É —Ç–µ–±—è –Ω–µ—Ç —É—Ä–æ–∫–æ–≤!")
                            send_important_events(user_id)
                    
                    except TelegramError:
                        pass

                schedule_sent_today = True
                return True
    finally:
        cursor.close()
        conn.close()

    return False
def reset_schedule_flag():
    global schedule_sent_today
    schedule_sent_today = False

schedule.every().day.at("00:01").do(reset_schedule_flag)

schedule.every().minute.do(check_end_of_day)

def generate_command(subject_name):
    subject_name = subject_name.lower().replace(' ', '_') 
    subject_name = subject_name.replace('/', '_').replace('.', '_')  
    subject_name = transliterate.translit(subject_name, reversed=True)  
    command = f"/h_{subject_name}"
    return command


@bot.message_handler(func=lambda message: message.text.startswith('/h_'))
def handle_homework_command(message):
    command = message.text

    cursor.execute('SELECT subject FROM schedule WHERE command=?', (command,))
    subject_data = cursor.fetchone()

    if subject_data:
        subject = subject_data[0]

        cursor.execute('SELECT homework, photo_ids FROM homework WHERE subject=?', (subject,))
        homework_data = cursor.fetchone()

        if homework_data:
            homework, photo_ids = homework_data
            if photo_ids:
                photo_ids_list = photo_ids.split(',')
                media_group = []
                for photo_id in photo_ids_list:
                    media_group.append(types.InputMediaPhoto(photo_id, caption=homework if len(media_group) == 0 else ''))

                media_messages = bot.send_media_group(message.chat.id, media_group)
                media_message_ids = [media.message_id for media in media_messages]

                markup = types.InlineKeyboardMarkup()
                collapse_button = types.InlineKeyboardButton(
                    "–°–≤–µ—Ä–Ω—É—Ç—å", 
                    callback_data=f'collapse_{message.message_id}_{",".join(map(str, media_message_ids))}'
                )
                markup.add(collapse_button)

                bot.send_message(message.chat.id, "–ù–∞–∂–º–∏ —á—Ç–æ-–±—ã —Å–≤–µ—Ä–Ω—É—Ç—å", reply_markup=markup)
            else:
                markup = types.InlineKeyboardMarkup()
                collapse_button = types.InlineKeyboardButton(
                    "–°–≤–µ—Ä–Ω—É—Ç—å", 
                    callback_data=f'collapse_{message.message_id}_{message.message_id}'
                )
                markup.add(collapse_button)
                bot.send_message(message.chat.id, homework, reply_markup=markup)
        else:
            bot.send_message(message.chat.id, f"–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ {subject} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        bot.send_message(message.chat.id, f"–ö–æ–º–∞–Ω–¥–∞ {command} –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('collapse_'))
def handle_collapse_callback(call):

    data_parts = call.data.split('_')
    user_message_id = int(data_parts[1])
    message_ids = data_parts[2].split(',')

    try:
        bot.delete_message(call.message.chat.id, user_message_id)
    except telebot.apihelper.ApiTelegramException as e:
        if "message to delete not found" not in str(e):
            raise

    for message_id in message_ids:
        try:
            bot.delete_message(call.message.chat.id, int(message_id))
        except telebot.apihelper.ApiTelegramException as e:
            if "message to delete not found" not in str(e):
                raise

    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except telebot.apihelper.ApiTelegramException as e:
        if "message to delete not found" not in str(e):
            raise
@bot.message_handler(commands=['add_event'])
def start_add_event(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú):")
    bot.register_next_step_handler(message, process_start_date)

def process_start_date(message):
    if not is_admin(message.from_user.id):
        return

    try:
        start_date_input = message.text.strip()
        start_date = datetime.strptime(start_date_input + f".{datetime.now().year}", "%d.%m.%Y").date()

        user_data[message.from_user.id] = {'start_date': start_date}
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú):")
        bot.register_next_step_handler(message, process_end_date)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.")
        bot.register_next_step_handler(message, process_start_date)

def process_start_date(message):
    if not is_admin(message.from_user.id):
        return

    try:
        start_date_input = message.text.strip()
        start_date = datetime.datetime.strptime(start_date_input + f".{datetime.datetime.now().year}", "%d.%m.%Y").date()

        user_data[message.from_user.id] = {'start_date': start_date}
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú):")
        bot.register_next_step_handler(message, process_end_date)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.")
        bot.register_next_step_handler(message, process_start_date)

def process_end_date(message):
    if not is_admin(message.from_user.id):
        return

    try:
        end_date_input = message.text.strip()
        end_date = datetime.datetime.strptime(end_date_input + f".{datetime.datetime.now().year}", "%d.%m.%Y").date()

        user_data[message.from_user.id]['end_date'] = end_date
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è:")
        bot.register_next_step_handler(message, process_event_text)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.")
        bot.register_next_step_handler(message, process_end_date)


def process_event_text(message):
    if not is_admin(message.from_user.id):
        return

    try:
        event_text = message.text.strip()
        user_id = message.from_user.id
        
        start_date = user_data[user_id]['start_date']
        end_date = user_data[user_id]['end_date']

        add_important_event(start_date, end_date, event_text)
        
        bot.send_message(message.chat.id, "–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
        
        del user_data[user_id]
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")
        if user_id in user_data:
            del user_data[user_id]

@bot.message_handler(commands=['delete_event'])
def delete_event_command(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        event_id = int(message.text.split(' ')[1])
        delete_important_event(event_id)
        bot.reply_to(message, f"–°–æ–±—ã—Ç–∏–µ —Å ID {event_id} —É–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['list_events'])
def list_events_command(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    cursor.execute('SELECT id, start_date, end_date, event_text FROM important_events')
    events = cursor.fetchall()

    if events:
        response = "üìÖ <b>–í–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:</b>\n\n"
        for event in events:
            event_id, start_date, end_date, event_text = event
            response += f"üîπ <b>ID:</b> {event_id}\n   <b>–°–æ–±—ã—Ç–∏–µ:</b> {event_text}\n   <b>–° {start_date} –ø–æ {end_date}</b>\n\n"
        bot.send_message(message.chat.id, response, parse_mode="HTML")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")

def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(1)


scheduler_thread = threading.Thread(target=run_scheduler)
scheduler_thread.start()


@bot.message_handler(commands=['clear_chat'])
def clear_chat(message):
    chat_id = message.chat.id
    message_id = message.message_id

    markup = types.InlineKeyboardMarkup()
    yes_button = types.InlineKeyboardButton("‚úÖ–î–∞, —Ç–æ—á–Ω–æ", callback_data="confirm_clear")
    no_button = types.InlineKeyboardButton("‚ùå–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_clear")
    markup.add(yes_button, no_button)

    warning_message = bot.send_message(chat_id, 
        "–¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç? –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.",
        reply_markup=markup
    )

    bot.clear_chat_context = {'message_id': message_id, 'warning_message_id': warning_message.message_id}

@bot.callback_query_handler(func=lambda call: call.data in ['confirm_clear', 'cancel_clear'])
def handle_clear_confirmation(call):
    chat_id = call.message.chat.id

    if call.data == 'confirm_clear':
        perform_clear_chat(chat_id, call.message)
    else:
        clear_chat_context = bot.clear_chat_context
        try:
            bot.delete_message(chat_id, clear_chat_context['warning_message_id'])
        except Exception:
            pass 

        try:
            bot.delete_message(chat_id, clear_chat_context['message_id'])
        except Exception:
            pass  

        try:
            bot.delete_message(chat_id, call.message.message_id)
        except Exception:
            pass  

def perform_clear_chat(chat_id, warning_message):
    deleted_messages = 0
    message_id = warning_message.message_id
    max_failures = 101
    failure_count = 0

    notification = bot.send_message(chat_id, "–û—á–∏—â–∞—é —á–∞—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")

    while message_id > 0:
        try:
            if message_id != notification.message_id:
                bot.delete_message(chat_id, message_id)
                deleted_messages += 1
                failure_count = 0  
        except Exception:
            failure_count += 1
            if failure_count >= max_failures:
                break  
        message_id -= 1

    try:
        bot.delete_message(chat_id, notification.message_id)
    except Exception:
        pass  

    bot.send_message(chat_id, f"–ß–∞—Ç –æ—á–∏—â–µ–Ω. –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {deleted_messages}, –Ω–∞–ø–∏—à–∏ /start —á—Ç–æ-–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
    bot.send_message(chat_id, f"–ï—Å–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ –µ—â–µ –æ—Å—Ç–∞–ª–∏—Å—å –ø–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É")

days_mapping = {
    '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 'Monday',
    '–í—Ç–æ—Ä–Ω–∏–∫': 'Tuesday',
    '–°—Ä–µ–¥–∞': 'Wednesday',
    '–ß–µ—Ç–≤–µ—Ä–≥': 'Thursday',
    '–ü—è—Ç–Ω–∏—Ü–∞': 'Friday'
}

@bot.message_handler(commands=['edit_lesson'])
def edit_lesson(message: Message):
    if is_admin(message.from_user.id):
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        markup = types.InlineKeyboardMarkup()
        days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞']
        for day in days:
            markup.add(types.InlineKeyboardButton(day, callback_data=f"edit_day_{day}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_day_'))
def select_day(call: types.CallbackQuery):
    day_of_week_rus = call.data.split('_')[2]  # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    day_of_week_eng = days_mapping[day_of_week_rus]  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {day_of_week_rus}. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞:")
    bot.register_next_step_handler(call.message, process_edit_lesson, day_of_week_eng)

def process_edit_lesson(message: Message, day_of_week):
    try:
        lesson_number = message.text
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ (–ü—Ä–∏–º–µ—Ä: –§–∏–∑—Ä–∞ 15:30 16:00):")
        bot.register_next_step_handler(message, finalize_edit_lesson, day_of_week, lesson_number)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")

def finalize_edit_lesson(message: Message, day_of_week, lesson_number):
    try:
        data = message.text.split()
        if len(data) == 3:
            subject, start_time, end_time = data
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
            homework_link = generate_command(subject)
            
            cursor.execute('''
                UPDATE schedule
                SET subject = ?, start_time = ?, end_time = ?, command = ?
                WHERE day_of_week = ? AND lesson_number = ?
            ''', (subject, start_time, end_time, homework_link, day_of_week, lesson_number))
            conn.commit()
            bot.send_message(message.chat.id, f"–£—Ä–æ–∫ {lesson_number} –Ω–∞ {day_of_week} –∏–∑–º–µ–Ω—ë–Ω.")
        else:
            bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")

# 2. –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Ä–æ–∫–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –¥–µ–Ω—å
@bot.message_handler(commands=['delete_last_lesson'])
def delete_last_lesson(message: Message):
    if is_admin(message.from_user.id):
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        markup = types.InlineKeyboardMarkup()
        days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞']
        for day in days:
            markup.add(types.InlineKeyboardButton(day, callback_data=f"delete_last_{day}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Ä–æ–∫–∞:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_last_'))
def process_delete_last_lesson(call: types.CallbackQuery):
    day_of_week_rus = call.data.split('_')[2]  # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    day_of_week_eng = days_mapping.get(day_of_week_rus)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    if day_of_week_eng:
        try:
            cursor.execute('''
                SELECT MAX(lesson_number) FROM schedule WHERE day_of_week = ?
            ''', (day_of_week_eng,))
            last_lesson_number = cursor.fetchone()[0]
            if last_lesson_number:
                cursor.execute('''
                    DELETE FROM schedule WHERE day_of_week = ? AND lesson_number = ?
                ''', (day_of_week_eng, last_lesson_number))
                conn.commit()
                bot.send_message(call.message.chat.id, f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫ –Ω–æ–º–µ—Ä {last_lesson_number} –Ω–∞ {day_of_week_rus} —É–¥–∞–ª—ë–Ω.")
            else:
                bot.send_message(call.message.chat.id, "–ù–µ—Ç —É—Ä–æ–∫–æ–≤ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.")
        except Exception as e:
            bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
    else:
        bot.send_message(call.message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.")

# 3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞ –≤ –∫–æ–Ω–µ—Ü –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –¥–Ω—è
@bot.message_handler(commands=['add_lesson'])
def add_lesson(message: Message):
    if is_admin(message.from_user.id):
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        markup = types.InlineKeyboardMarkup()
        days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞']
        for day in days:
            markup.add(types.InlineKeyboardButton(day, callback_data=f"add_lesson_{day}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@bot.message_handler(commands=['add_lesson'])
def add_lesson(message: Message):
    if is_admin(message.from_user.id):
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        markup = types.InlineKeyboardMarkup()
        days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞']
        for day in days:
            markup.add(types.InlineKeyboardButton(day, callback_data=f"add_lesson_{day}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('add_lesson_'))
def process_add_lesson(call: types.CallbackQuery):
    day_of_week_rus = call.data.split('_')[2]  # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    day_of_week_eng = days_mapping.get(day_of_week_rus)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    if day_of_week_eng:
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ –ø—Ä–µ–¥–º–µ—Ç, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ (–ü—Ä–∏–º–µ—Ä: –§–∏–∑—Ä–∞ 15:30 16:00):")
        bot.register_next_step_handler(call.message, finalize_add_lesson, day_of_week_eng)
    else:
        bot.send_message(call.message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.")

def finalize_add_lesson(message: Message, day_of_week):
    try:
        data = message.text.split()
        if len(data) == 3:
            subject, start_time, end_time = data
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
            command = generate_command(subject)
            
            cursor.execute('''
                SELECT MAX(lesson_number) FROM schedule WHERE day_of_week = ?
            ''', (day_of_week,))
            last_lesson_number = cursor.fetchone()[0] or 0
            new_lesson_number = last_lesson_number + 1
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
            cursor.execute('''
                INSERT INTO schedule (day_of_week, lesson_number, subject, start_time, end_time, command)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (day_of_week, new_lesson_number, subject, start_time, end_time, command))
            conn.commit()
            
            bot.send_message(message.chat.id, f"–ù–æ–≤—ã–π —É—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ {day_of_week}: {subject} ({start_time} - {end_time})")
        else:
            bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")

def check_birthdays():
    today = datetime.now().strftime('%d-%m')  # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å-–º–µ—Å—è—Ü
    cursor.execute("SELECT user_id, name FROM users WHERE birthday LIKE ?", (f'%{today}%',))
    users = cursor.fetchall()
    
    for user in users:
        user_id, name = user
        message = f'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è, {name}! üéÇ –ñ–µ–ª–∞—é –≤—Å–µ–≥–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ! üéâ'
        bot.send_message(user_id, message)

# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ 8:20
schedule.every().day.at("08:20").do(check_birthdays)

def close_connection():
    conn.close()

atexit.register(close_connection)

bot.polling()